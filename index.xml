<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A.I&#39;s Blog</title>
    <link>https://merrick.luois.me/index.xml</link>
    <description>Recent content on A.I&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Fri, 06 Jan 2017 23:31:47 +0800</lastBuildDate>
    <atom:link href="https://merrick.luois.me/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>about</title>
      <link>https://merrick.luois.me/about/</link>
      <pubDate>Fri, 06 Jan 2017 23:31:47 +0800</pubDate>
      
      <guid>https://merrick.luois.me/about/</guid>
      <description>&lt;p&gt;why not?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using kwm</title>
      <link>https://merrick.luois.me/using-kwm/</link>
      <pubDate>Tue, 08 Nov 2016 23:40:13 +0800</pubDate>
      
      <guid>https://merrick.luois.me/using-kwm/</guid>
      <description>

&lt;h1 id=&#34;一些废话-可跳过&#34;&gt;一些废话（可跳过）&lt;/h1&gt;

&lt;p&gt;前一段时间也算是好好的折腾了一下 Linux 桌面，然后深深地“迷上”了 i3，不过由于在水果本子上安装 Linux 不太顺利（懒）。&lt;/p&gt;

&lt;p&gt;所以工作的大部分时间还是用着先进系统，不停需要切换到鼠标点点点点点点点点点真的是很烦人，更不提先进系统上那先进的 Window 系统（每次切到 App 会把所有的窗口都拉到前面来）了。&lt;/p&gt;

&lt;p&gt;之前也有测试过各种试图在先进系统上模拟 i3 的应用，比如 amethyst、slate 等等，怎么说呢&amp;#x2026;都&amp;#x2026;不好用&amp;#x2026;包括者别要说到的 kwm 之前也已经试过，当时相当不稳定，而且功能也不太全，不过这次尝试之后发现已经能用了，基本能有 1／3 用 i3 的时候那么爽了&amp;#x2026;&lt;/p&gt;

&lt;h1 id=&#34;install&#34;&gt;Install&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/koekeishiya/kwm&#34;&gt;GitHub&lt;/a&gt; 上非常详细的，最简单的当然是&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install koekeishiya/kwm/kwm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动/管理的最简单方法是用 &lt;a href=&#34;https://github.com/Homebrew/homebrew-services&#34;&gt;homebrew-services&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew servies start/stop/restart kwm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后你就会发现你所有的 Window 开始跳来跳去了！Don&amp;rsquo;t Panic!&lt;/p&gt;

&lt;h1 id=&#34;config&#34;&gt;Config&lt;/h1&gt;

&lt;p&gt;在 Github 仓库里也有提供一个&lt;a href=&#34;https://github.com/koekeishiya/kwm/tree/master/examples&#34;&gt;example&lt;/a&gt; config, 不过好像现在的是简化版，大概是想让用户自行配置比较好吧，我这里是之前版本留下的比较完整的 &lt;a href=&#34;https://gist.github.com/merrickluo/b27fd1b69729d6e4bb8397a9a394b1ba&#34;&gt;example&lt;/a&gt; 和我自己的一些修改，里面基本所有的选项都有注释。&lt;/p&gt;

&lt;p&gt;所有可用的选项在&lt;a href=&#34;https://koekeishiya.github.io/kwm/kwmc.html&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;一些概念：&lt;/p&gt;

&lt;p&gt;space = i3 workspace&lt;/p&gt;

&lt;p&gt;window = i3 window&lt;/p&gt;

&lt;p&gt;display = 显示器&lt;/p&gt;

&lt;p&gt;然后下面是我自己用到的常用按键配置:
cmd+ctrl 当做 i3 的 mod
alt+ctrl 当作 i3 的 shift+mod&lt;/p&gt;

&lt;h2 id=&#34;同一个-space-下切换焦点&#34;&gt;同一个 space 下切换焦点&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;kwmc bindsym cmd+ctrl-h window -f west
kwmc bindsym cmd+ctrl-l window -f east
kwmc bindsym cmd+ctrl-j window -f south
kwmc bindsym cmd+ctrl-k window -f north
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;同一个-space-下交换焦点-window-的位置&#34;&gt;同一个 space 下交换焦点 window 的位置&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;kwmc bindsym ctrl+alt-h window -s west
kwmc bindsym ctrl+alt-j window -s south
kwmc bindsym ctrl+alt-k window -s north
kwmc bindsym ctrl+alt-l window -s east
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;切换-space-基本跟-mission-control-一样-不过没有动画-important&#34;&gt;切换 space，基本跟 Mission Control 一样，不过没有动画（important！）&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;kwmc bindsym ctrl-1 space -fExperimental 1
kwmc bindsym ctrl-2 space -fExperimental 2
kwmc bindsym ctrl-3 space -fExperimental 3
kwmc bindsym ctrl-4 space -fExperimental 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;需要注意的是这个功能会把 Mission Control 搞坏&lt;/p&gt;

&lt;h2 id=&#34;启动-prefix-类似-i3-的自定义-mode-在-prefix-状态下-所有快捷键有另外的用途&#34;&gt;启动 prefix，类似 i3 的自定义 mode，在 prefix 状态下，所有快捷键有另外的用途&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;// Activate prefix mode
kwmc bindsym cmd+ctrl+q mode activate prefix
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;切换焦点到不同的显示器&#34;&gt;切换焦点到不同的显示器&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;kwmc bindsym cmd+ctrl+1 display -f 0
kwmc bindsym cmd+ctrl+2 display -f 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;轻量调整窗口宽度&#34;&gt;轻量调整窗口宽度&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;kwmc bindsym prefix-h window -c reduce 0.05
kwmc bindsym prefix-l window -c expand 0.05
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;让-kwm-识别-emacs-为普通窗口&#34;&gt;让 kwm 识别 Emacs 为普通窗口&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;kwmc rule owner=&amp;quot;Emacs&amp;quot; properties={role=&amp;quot;AXStandardWindow&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;有些需要-float-的窗口&#34;&gt;有些需要 float 的窗口&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;kwmc rule properties={float=&amp;quot;true&amp;quot;} owner=&amp;quot;App Store&amp;quot;
kwmc rule properties={float=&amp;quot;true&amp;quot;} owner=&amp;quot;System Preferences&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可根据需求酌情添加&lt;/p&gt;

&lt;h2 id=&#34;差点忘了最重要的-随时随地启动-iterm2&#34;&gt;差点忘了最重要的：随时随地启动 iTerm2&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;kwmc bindsym cmd-return exec open -na /Applications/iTerm2.app
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;重启和重新加载配置&#34;&gt;重启和重新加载配置&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;kwmc bindsym cmd+alt+ctrl-q quit
kwmc bindsym cmd+alt+ctrl-r config reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里上面一个命令虽然说是退出，但是因为我们是以 daemon 模式启动的，所以它会自动重启，我一般用这种方式来更新配置，因为下面一个命令按了之后 UI 没有反应，不知道有没有生效&amp;#x2026;&lt;/p&gt;

&lt;p&gt;根据我这一两个星期的使用，大量使用的快捷键大概就这些了。&lt;/p&gt;

&lt;h1 id=&#34;problems&#34;&gt;Problems&lt;/h1&gt;

&lt;p&gt;虽说现在已经到可用的程度，不过问题还是有一些的，比如有时候窗口跳来跳去，有些藏在后台的窗口会影响布局等&amp;#x2026;但是一般这种情况按下重启的快捷键也就好了&amp;#x2026;&lt;/p&gt;

&lt;p&gt;现在拖后腿的反倒是用了 cVim 的 Chrome 呢，感觉不久后我又会启动一波 Firefox 体验活动了&amp;#x2026;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Ultimate Emacs Entry Point</title>
      <link>https://merrick.luois.me/the-ultimate-emacs-entry/</link>
      <pubDate>Sun, 21 Aug 2016 01:08:11 +0800</pubDate>
      
      <guid>https://merrick.luois.me/the-ultimate-emacs-entry/</guid>
      <description>

&lt;p&gt;最近对于工具有点疯魔（写不出代码只好折腾下工具了&lt;/p&gt;

&lt;h2 id=&#34;at-first&#34;&gt;At first&lt;/h2&gt;

&lt;p&gt;Emacs作为一个Lisp Machine，启动时间虽说比其他操作系统快得多，但是由于经常会无意间被关机，导致大家对其启动速度印象深刻。
虽说 &lt;code&gt;emacs --daemon&lt;/code&gt; 可以部分解决这个问题，但还是无法拯救喜欢乱按 space-q-q 的我（spacemacs用户），在这样的情况下呢，启动慢已经不是最让我烦心的事了，由于 &lt;code&gt;emacs --daemon&lt;/code&gt;, 所以大部分的东西我都会用&lt;code&gt;emacscliet -c&lt;/code&gt;来当作编辑器，如果daemon不小心被我自己干掉了，那么这些操作全部会中断。又得手动&lt;code&gt;emacs --daemon&lt;/code&gt;，总之一个字，烦！&lt;/p&gt;

&lt;h2 id=&#34;so&#34;&gt;So&lt;/h2&gt;

&lt;p&gt;于是就有了这么一个脚本&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
# making fcitx working in emacs
client=&amp;quot;emacsclient&amp;quot;
# I dont want to start a new frame if there is one
frame_count=`emacsclient -e &#39;(true-frame-count)&#39; 2&amp;gt;/dev/null || echo -1`
# start server if not started 
if [ $frame_count -lt 0 ]; then
    LC_CTYPE=zh_CN.UTF-8 emacs --daemon
    client=&amp;quot;$client -c&amp;quot;
    # make frame if no param coming
elif [ $frame_count -lt 1 ]; then
    client=&amp;quot;$client -c&amp;quot;
fi
$client $@ 2&amp;gt;/dev/null
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and in emacs init script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(defun true-frame-count()
  (length
   (remove-if
    (lambda(f) (string-equal (terminal-name f) &amp;quot;initial_terminal&amp;quot;))
    (frame-list))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为如果以 &amp;ndash;daemon 模式启动，就会有这样一个叫做 initial_terminal的frame强行说自己visible。&lt;/p&gt;

&lt;p&gt;and in i3 config:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;# emacs
focus_on_window_activation focus
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;todo&#34;&gt;TODO&lt;/h2&gt;

&lt;p&gt;大概会看看用Automator怎么在OSX哦不，是macOS上实现类似的功能。（改名字真好玩，反正改名字的人不用搜索）。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>开始使用 Spacemacs</title>
      <link>https://merrick.luois.me/start-use-spacemacs/</link>
      <pubDate>Sat, 12 Dec 2015 01:14:46 +0800</pubDate>
      
      <guid>https://merrick.luois.me/start-use-spacemacs/</guid>
      <description>

&lt;h2 id=&#34;开始使用-spacemacs&#34;&gt;开始使用 Spacemacs&lt;/h2&gt;

&lt;p&gt;虽说上一篇 Blog 已经是在很久之前，但是上篇刚说了不爱用 vim 的快捷键，现在就开始用 spacemacs 貌似有些奇怪=。=&lt;/p&gt;

&lt;p&gt;我为什么开始使用 vim 的 keybinding 呢，说来话长，一切都要从坑爹的 Xcode 说起&amp;hellip;（省略对 Xcode 的 1w 字吐槽）总之因为 Xcode 无法支持 Emacs 的 keybinding（别说 Karabiner，这玩意儿影响太多东西），然后自带的 keybinding 效率实在太低，于是我不得不开始使用 XVim，然后在背叛 Emacs 的道路上越走越远（强力推荐 Chrome 的插件 cVim）。&lt;/p&gt;

&lt;p&gt;但是我不得不说，spacemacs 确实相当的好用，之前也有试过 oh-my-emacs 等等配置，然后自己也乱七八糟配过一些，都谈不上好用，而且还有一些相当麻烦的问题，虽说 spacemacs 问题也不不少，好在最后都找到了解决方案，下面就来记录一下配置时遇到的一些小问题。&lt;/p&gt;

&lt;h2 id=&#34;安装spacemacs&#34;&gt;安装spacemacs&lt;/h2&gt;

&lt;p&gt;参见&lt;a href=&#34;https://github.com/syl20bnr/spacemacs&#34;&gt;官方文档&lt;/a&gt;，就不再赘述&lt;/p&gt;

&lt;p&gt;装好之后，打开Emacs，&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find-file ~/.spacemacs
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;emacs-behind-proxy&#34;&gt;Emacs behind proxy&lt;/h2&gt;

&lt;p&gt;要想正常使用软件，第一件事就是配好代理，Emacs 里面的包管理，shell，都是需要代理的，所以第一步就是要配好代理&lt;/p&gt;

&lt;p&gt;在dotspacemacs/user-init() 中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(setq url-proxy-services
    &#39;((&amp;quot;no_proxy&amp;quot; . &amp;quot;^\\(localhost\\|10.*\\)&amp;quot;)
      (&amp;quot;http&amp;quot; . &amp;quot;proxy_host:port&amp;quot;)
      (&amp;quot;https&amp;quot; . &amp;quot;proxy_host:port&amp;quot;)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C-x，C-e and you are good to go.
这里需要一个 http 的代理，如果用 shadowsocks 转一下就好。&lt;/p&gt;

&lt;h2 id=&#34;fonts&#34;&gt;Fonts&lt;/h2&gt;

&lt;p&gt;字体不对简直不想写代码，所以先配好字体&lt;/p&gt;

&lt;p&gt;英文字体&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(setq-default dotspacemacs-default-font &#39;(&amp;quot;Essential PragmataPro&amp;quot;
                                        :size 14
                                        :weight normal
                                        :width normal
                                        :powerline-scale 1.1))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;中文字体&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(dolist (charset &#39;(kana han symbol cjk-misc bopomofo))
(set-fontset-font (frame-parameter nil &#39;font)
                  charset (font-spec :family &amp;quot;Source Han Sans SC&amp;quot;
                                     :size 13)))
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;fish-in-emacs&#34;&gt;Fish in Emacs&lt;/h2&gt;

&lt;p&gt;接下来是比较麻烦的部分，至于为什么要在 Emacs 中用 Fish，没办法，Emacs 党就是喜欢 one to rule them all。&lt;/p&gt;

&lt;p&gt;首先安装 spacemacs 提供的 shell layer 并配置一下默认 shell&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(shell :variables
        shell-default-term-shell &amp;quot;/usr/local/bin/fish&amp;quot;
        shell-default-height 30
        shell-default-position &#39;bottom)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后打开 ansi-term，你会发现几个问题：&lt;/p&gt;

&lt;p&gt;a) prompt 下面会多出一个回车符号，在 dotspacemacs/user-init() 里加入&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  (add-hook &#39;term-mode-hook
        (lambda ()
          (toggle-truncate-lines)
          (make-local-variable &#39;transient-mark-mode)
          (setq transient-mark-mode nil)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;b) prompt title 显示问题&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find-file ~/.config/fish/config.fish
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;加上&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function fish_title
    true
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;c) fish 的自动提示出现时，会显示一个 4m 并换行，同样在 dotspacemacs/user-init() 中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(setq system-uses-terminfo nil)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;暂且到另一个 terminal 中，如果 emacs 是用 Homebrew 安装的，执行以下命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tic -o ~/.terminfo /usr/local/share/emacs/24.5/etc/e/eterm-color.ti
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其他安装方法，请自行找到类似目录&lt;/p&gt;

&lt;h2 id=&#34;kotlin-mode&#34;&gt;kotlin-mode&lt;/h2&gt;

&lt;p&gt;目前 kotlin 官方并没有支持Emacs，只在github上搜到了两个repo，[这个]()以及[这个]()，目前没有发现有什么区别。&lt;/p&gt;

&lt;p&gt;参照 spacemacs 自定义 layer 的方法并使用以上两个中任意一个即可获得 kotlin 代码的语法高亮显示。&lt;/p&gt;

&lt;h2 id=&#34;magit&#34;&gt;magit&lt;/h2&gt;

&lt;p&gt;magit 的安装非常简单，安装 spacemacs 自带的 git layer 即可，唯一的问题是文档中提到的默认将 magit-status 的 buffer 打开全屏的设置方法失效了，经过一番查询后，现在需要一个第三方的 extesion 才能实现。&lt;/p&gt;

&lt;p&gt;这个在.spacemacs 中搜索一下加在对应位置即可&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(setq dotspacemacs-additional-packages&#39;(fullframe))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dotspacemacs/user-config() 中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(fullframe magit-status magit-mode-quit-window)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重新同步 packages 即可。&lt;/p&gt;

&lt;h2 id=&#34;todo&#34;&gt;TODO&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;补充链接&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;history&#34;&gt;History&lt;/h2&gt;

&lt;p&gt;2015.12.12 initial version
2015.12.13 kotlin-mode 和 magit&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>在Mac上更好的使用Emacs快捷键</title>
      <link>https://merrick.luois.me/better-emacs-keymap-on-mac/</link>
      <pubDate>Wed, 10 Sep 2014 01:08:11 +0800</pubDate>
      
      <guid>https://merrick.luois.me/better-emacs-keymap-on-mac/</guid>
      <description>&lt;p&gt;&amp;nbsp; &amp;nbsp; 不太记得自己为啥学了Emacs，大概是最开始听说作为程序员Emacs和Vim至少得会用一个，然后觉得Vim各种要按Esc傻傻的，所以就安心学习了Emacs的快捷键。不过要说作为一个Android开发者（虽说你强行要在Emacs中开发也不是不行，但是代价太大，我反正是放弃了），还是得用到IDE，不过好在的是，各种好用的IDE都是支持修改快捷键的，而且也早有大神们做好了各种Emacs的Keymap供我们使用（吐槽：不论是Eclipse还是Intellij自带的Emacs布局都不好用）。&lt;/p&gt;

&lt;p&gt;&amp;nbsp; &amp;nbsp; 现在回到标题，其实Mac（OS X whatever）对Emacs爱好者可谓又爱又狠，爱的是，大部分编辑文本的地方都能用基本的Emacs光标移动等快捷键，恨的是这个可恶的Option按钮，他完全没办法作为Meta键使用，让我每次都按ESC？你等等，我先去跳个楼。不过好在的是Emacs爱好者们都遇到了这个问题，于是就有了解决方案。&lt;/p&gt;

&lt;p&gt;&amp;nbsp; &amp;nbsp; 大部分的解决方案都是使用Ukulele这个软件重新编辑键盘布局，大致操作就是新建一个键盘布局，然后按住Option键，把所有键值都清掉，保存并放在~/Library/KeyboardLayout/中，最后到语言和输入法中选择这个键盘布局就搞定啦。还有一点要提一下的是，大部分的中文输入法都支持选择键盘布局，所以以后也可以保持在中文输入法状态下搬砖啦。
&amp;nbsp; &amp;nbsp;
&amp;nbsp; &amp;nbsp; 另外上面的手动方法可能比较麻烦，大致介绍以下原理，这个&lt;a href=&#34;http://wordherd.com/keyboards/&#34;&gt;网站&lt;/a&gt;可以直接下载改好的键盘布局文件，直接放进去就能用了。&lt;/p&gt;

&lt;p&gt;&amp;nbsp; &amp;nbsp;最后祝大家敲键盘愉快，小指头健康~&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>