<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on A.I&#39;s Blog</title>
    <link>https://merrick.luois.me/blog/</link>
    <description>Recent content in Blog on A.I&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 14 Mar 2018 00:07:10 +0800</lastBuildDate>
    
	<atom:link href="https://merrick.luois.me/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shadowsocks Openwrt Setup</title>
      <link>https://merrick.luois.me/shadowsocks-openwrt-setup/</link>
      <pubDate>Wed, 14 Mar 2018 00:07:10 +0800</pubDate>
      
      <guid>https://merrick.luois.me/shadowsocks-openwrt-setup/</guid>
      <description>正常来讲我本来不想写一篇 “Yet another Shadowsocks installation guide&#34;， 不过前几天升级路由发现又得编译一次然后之前的工具又不见了的时候，又得到 Google “翻箱倒柜”找编译步骤，不如记下来顺便发一下吧。
编译环境 到 Openwrt 找到路由器对应的 SDK 下载条目，我路由器是 WNDR4300，版本是 lede 17.01.4，SDK 名字是 `lede-sdk-17.01.4-ar71xx-nand_gcc-5.4.0_musl-1.1.16.Linux-x86_64.tar.xz` 之所以先看名字是想确定 gcc 的版本，据经验来看，使用其他版本的 gcc 编译会很惨 （此处省略200字抱怨）。
由于这时候还没有翻墙，所以编译最好在一个墙外的 VPS 上搞定。 （安装 docker 这种步骤就先跳过了）。
docker run -it --name lede gcc:5.4 bash cd /usr/src curl $SDK_URL -O tar xvf $SDK_FILENAME mv $SDK_DIR lede-sdk cd lede-sdk  编译 这两位 openwrt-shadowsocks &amp; luci-app-shadowsocks
git clone https://github.com/shadowsocks/openwrt-feeds.git package/feeds git clone https://github.com/shadowsocks/openwrt-shadowsocks.git package/shadowsocks-libev git clone https://github.com/shadowsocks/luci-app-shadowsocks.git package/luci-app-shadowsocks pushd package/luci-app-shadowsocks/tools/po2lmo make &amp;amp;&amp;amp; make install popd make menuconfig make package/shadowsocks-libev/compile V=99 make package/luci-app-shadowsocks/compile V=99  打包 mkdir ipks # 有些是不需要的，不过懒得花时间去排除了 cp bin/packages/mips_24kc/base/*.</description>
    </item>
    
    <item>
      <title>Using kwm</title>
      <link>https://merrick.luois.me/using-kwm/</link>
      <pubDate>Tue, 08 Nov 2016 23:40:13 +0800</pubDate>
      
      <guid>https://merrick.luois.me/using-kwm/</guid>
      <description>一些废话（可跳过） 前一段时间也算是好好的折腾了一下 Linux 桌面，然后深深地“迷上”了 i3，不过由于在水果本子上安装 Linux 不太顺利（懒）。
所以工作的大部分时间还是用着先进系统，不停需要切换到鼠标点点点点点点点点点真的是很烦人，更不提先进系统上那先进的 Window 系统（每次切到 App 会把所有的窗口都拉到前面来）了。
之前也有测试过各种试图在先进系统上模拟 i3 的应用，比如 amethyst、slate 等等，怎么说呢&amp;#x2026;都&amp;#x2026;不好用&amp;#x2026;包括者别要说到的 kwm 之前也已经试过，当时相当不稳定，而且功能也不太全，不过这次尝试之后发现已经能用了，基本能有 1／3 用 i3 的时候那么爽了&amp;#x2026;
Install GitHub 上非常详细的，最简单的当然是
brew install koekeishiya/kwm/kwm  启动/管理的最简单方法是用 homebrew-services:
brew servies start/stop/restart kwm  然后你就会发现你所有的 Window 开始跳来跳去了！Don&amp;rsquo;t Panic!
Config 在 Github 仓库里也有提供一个example config, 不过好像现在的是简化版，大概是想让用户自行配置比较好吧，我这里是之前版本留下的比较完整的 example 和我自己的一些修改，里面基本所有的选项都有注释。
所有可用的选项在这里。
一些概念：
space = i3 workspace
window = i3 window
display = 显示器
然后下面是我自己用到的常用按键配置: cmd+ctrl 当做 i3 的 mod alt+ctrl 当作 i3 的 shift+mod</description>
    </item>
    
    <item>
      <title>The Ultimate Emacs Entry Point</title>
      <link>https://merrick.luois.me/the-ultimate-emacs-entry/</link>
      <pubDate>Sun, 21 Aug 2016 01:08:11 +0800</pubDate>
      
      <guid>https://merrick.luois.me/the-ultimate-emacs-entry/</guid>
      <description>最近对于工具有点疯魔（写不出代码只好折腾下工具了
At first Emacs作为一个Lisp Machine，启动时间虽说比其他操作系统快得多，但是由于经常会无意间被关机，导致大家对其启动速度印象深刻。 虽说 emacs --daemon 可以部分解决这个问题，但还是无法拯救喜欢乱按 space-q-q 的我（spacemacs用户），在这样的情况下呢，启动慢已经不是最让我烦心的事了，由于 emacs --daemon, 所以大部分的东西我都会用emacscliet -c来当作编辑器，如果daemon不小心被我自己干掉了，那么这些操作全部会中断。又得手动emacs --daemon，总之一个字，烦！
So 于是就有了这么一个脚本
#!/bin/sh # making fcitx working in emacs client=&amp;quot;emacsclient&amp;quot; # I dont want to start a new frame if there is one frame_count=`emacsclient -e &#39;(true-frame-count)&#39; 2&amp;gt;/dev/null || echo -1` # start server if not started if [ $frame_count -lt 0 ]; then LC_CTYPE=zh_CN.UTF-8 emacs --daemon client=&amp;quot;$client -c&amp;quot; # make frame if no param coming elif [ $frame_count -lt 1 ]; then client=&amp;quot;$client -c&amp;quot; fi $client $@ 2&amp;gt;/dev/null  and in emacs init script:</description>
    </item>
    
    <item>
      <title>开始使用 Spacemacs</title>
      <link>https://merrick.luois.me/start-use-spacemacs/</link>
      <pubDate>Sat, 12 Dec 2015 01:14:46 +0800</pubDate>
      
      <guid>https://merrick.luois.me/start-use-spacemacs/</guid>
      <description>开始使用 Spacemacs 虽说上一篇 Blog 已经是在很久之前，但是上篇刚说了不爱用 vim 的快捷键，现在就开始用 spacemacs 貌似有些奇怪=。=
我为什么开始使用 vim 的 keybinding 呢，说来话长，一切都要从坑爹的 Xcode 说起&amp;hellip;（省略对 Xcode 的 1w 字吐槽）总之因为 Xcode 无法支持 Emacs 的 keybinding（别说 Karabiner，这玩意儿影响太多东西），然后自带的 keybinding 效率实在太低，于是我不得不开始使用 XVim，然后在背叛 Emacs 的道路上越走越远（强力推荐 Chrome 的插件 cVim）。
但是我不得不说，spacemacs 确实相当的好用，之前也有试过 oh-my-emacs 等等配置，然后自己也乱七八糟配过一些，都谈不上好用，而且还有一些相当麻烦的问题，虽说 spacemacs 问题也不不少，好在最后都找到了解决方案，下面就来记录一下配置时遇到的一些小问题。
安装spacemacs 参见官方文档，就不再赘述
装好之后，打开Emacs，
find-file ~/.spacemacs  Emacs behind proxy 要想正常使用软件，第一件事就是配好代理，Emacs 里面的包管理，shell，都是需要代理的，所以第一步就是要配好代理
在dotspacemacs/user-init() 中
(setq url-proxy-services &#39;((&amp;quot;no_proxy&amp;quot; . &amp;quot;^\\(localhost\\|10.*\\)&amp;quot;) (&amp;quot;http&amp;quot; . &amp;quot;proxy_host:port&amp;quot;) (&amp;quot;https&amp;quot; . &amp;quot;proxy_host:port&amp;quot;)))  C-x，C-e and you are good to go.</description>
    </item>
    
    <item>
      <title>在Mac上更好的使用Emacs快捷键</title>
      <link>https://merrick.luois.me/better-emacs-keymap-on-mac/</link>
      <pubDate>Wed, 10 Sep 2014 01:08:11 +0800</pubDate>
      
      <guid>https://merrick.luois.me/better-emacs-keymap-on-mac/</guid>
      <description>&amp;nbsp; &amp;nbsp; 不太记得自己为啥学了Emacs，大概是最开始听说作为程序员Emacs和Vim至少得会用一个，然后觉得Vim各种要按Esc傻傻的，所以就安心学习了Emacs的快捷键。不过要说作为一个Android开发者（虽说你强行要在Emacs中开发也不是不行，但是代价太大，我反正是放弃了），还是得用到IDE，不过好在的是，各种好用的IDE都是支持修改快捷键的，而且也早有大神们做好了各种Emacs的Keymap供我们使用（吐槽：不论是Eclipse还是Intellij自带的Emacs布局都不好用）。
&amp;nbsp; &amp;nbsp; 现在回到标题，其实Mac（OS X whatever）对Emacs爱好者可谓又爱又狠，爱的是，大部分编辑文本的地方都能用基本的Emacs光标移动等快捷键，恨的是这个可恶的Option按钮，他完全没办法作为Meta键使用，让我每次都按ESC？你等等，我先去跳个楼。不过好在的是Emacs爱好者们都遇到了这个问题，于是就有了解决方案。
&amp;nbsp; &amp;nbsp; 大部分的解决方案都是使用Ukulele这个软件重新编辑键盘布局，大致操作就是新建一个键盘布局，然后按住Option键，把所有键值都清掉，保存并放在~/Library/KeyboardLayout/中，最后到语言和输入法中选择这个键盘布局就搞定啦。还有一点要提一下的是，大部分的中文输入法都支持选择键盘布局，所以以后也可以保持在中文输入法状态下搬砖啦。 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 另外上面的手动方法可能比较麻烦，大致介绍以下原理，这个网站可以直接下载改好的键盘布局文件，直接放进去就能用了。
&amp;nbsp; &amp;nbsp;最后祝大家敲键盘愉快，小指头健康~</description>
    </item>
    
  </channel>
</rss>